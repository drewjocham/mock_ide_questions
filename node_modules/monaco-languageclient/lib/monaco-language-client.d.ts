import { BaseLanguageClient, MessageTransports, LanguageClientOptions, CloseAction, ErrorAction } from 'vscode-languageclient/lib/common/client.js';
export * from 'vscode-languageclient/lib/common/client.js';
export interface IConnectionProvider {
    get(encoding: string): Promise<MessageTransports>;
}
export declare class MonacoLanguageClient extends BaseLanguageClient {
    protected readonly connectionProvider: IConnectionProvider;
    constructor({ id, name, clientOptions, connectionProvider }: MonacoLanguageClient.Options);
    protected createMessageTransports(encoding: string): Promise<MessageTransports>;
    protected getLocale(): string;
    protected registerBuiltinFeatures(): void;
    registerTextDocumentSaveFeatures(): void;
    registerConfigurationFeatures(): void;
    registerProgressFeatures(): void;
}
export declare namespace MonacoLanguageClient {
    interface Options {
        name: string;
        id?: string;
        clientOptions: LanguageClientOptions;
        connectionProvider: IConnectionProvider;
    }
}
export { CloseAction, ErrorAction };
//# sourceMappingURL=monaco-language-client.d.ts.map