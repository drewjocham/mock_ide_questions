import { E as ExtensionsRegistry } from './missing-services.js';
import { EventEmitter } from 'vscode';
import './services2.js';
import { StandaloneServices } from 'monaco-editor/esm/vs/editor/standalone/browser/standaloneServices.js';
import Severity from 'monaco-editor/esm/vs/base/common/severity.js';
function consoleExtensionMessageHandler(msg) {
    if (msg.type === Severity.Error) {
        console.error(msg);
    }
    else if (msg.type === Severity.Warning) {
        console.warn(msg);
    }
    else {
        console.log(msg);
    }
}
function getExtensionPoint(extensionPoint) {
    return ExtensionsRegistry.getExtensionPoints().find(ep => ep.name === extensionPoint);
}
const emitter = new EventEmitter();
const onServicesInitialized = emitter.event;
let initialized = false;
const original = StandaloneServices.initialize;
StandaloneServices.initialize = (overrides) => {
    const instantiationService = original.call(StandaloneServices, overrides);
    if (!initialized) {
        initialized = true;
        emitter.fire(instantiationService);
    }
    return instantiationService;
};
export { consoleExtensionMessageHandler as c, getExtensionPoint as g, onServicesInitialized as o };
