import { E as Emitter } from './polyfill.js';
import './missing-services.js';
import { g as getServiceOverride$1, D as DialogHandlerContribution } from './layout.js';
import { _ as __decorate, a as __param } from './contextkey.js';
import { Disposable } from 'monaco-editor/esm/vs/base/common/lifecycle.js';
import { DeferredPromise } from 'monaco-editor/esm/vs/base/common/async.js';
import { j as IWorkbenchEnvironmentService } from './services2.js';
import { ILogService } from 'monaco-editor/esm/vs/platform/log/common/log.js';
import { o as onServicesInitialized } from './tools.js';
import { IDialogService } from 'monaco-editor/esm/vs/platform/dialogs/common/dialogs.js';
import { SyncDescriptor } from 'monaco-editor/esm/vs/platform/instantiation/common/descriptors.js';
class DialogsModel extends Disposable {
    constructor() {
        super(...arguments);
        this.dialogs = [];
        this._onWillShowDialog = this._register(( (new Emitter())));
        this.onWillShowDialog = this._onWillShowDialog.event;
        this._onDidShowDialog = this._register(( (new Emitter())));
        this.onDidShowDialog = this._onDidShowDialog.event;
    }
    show(dialog) {
        const promise = ( (new DeferredPromise()));
        const item = {
            args: dialog,
            close: result => {
                this.dialogs.splice(0, 1);
                promise.complete(result);
                this._onDidShowDialog.fire();
            }
        };
        this.dialogs.push(item);
        this._onWillShowDialog.fire();
        return {
            item,
            result: promise.p
        };
    }
}
let DialogService = class DialogService extends Disposable {
    constructor(environmentService, logService) {
        super();
        this.environmentService = environmentService;
        this.logService = logService;
        this.model = this._register(( (new DialogsModel())));
        this.onWillShowDialog = this.model.onWillShowDialog;
        this.onDidShowDialog = this.model.onDidShowDialog;
    }
    skipDialogs() {
        if (this.environmentService.isExtensionDevelopment && this.environmentService.extensionTestsLocationURI) {
            return true;
        }
        return !!this.environmentService.enableSmokeTestDriver;
    }
    async confirm(confirmation) {
        if (this.skipDialogs()) {
            this.logService.trace('DialogService: refused to show confirmation dialog in tests.');
            return { confirmed: true };
        }
        const handle = this.model.show({ confirmArgs: { confirmation } });
        return await handle.result;
    }
    async show(severity, message, buttons, options) {
        if (this.skipDialogs()) {
            throw new Error('DialogService: refused to show dialog in tests.');
        }
        const handle = this.model.show({ showArgs: { severity, message, buttons, options } });
        return await handle.result;
    }
    async input(severity, message, buttons, inputs, options) {
        if (this.skipDialogs()) {
            throw new Error('DialogService: refused to show input dialog in tests.');
        }
        const handle = this.model.show({ inputArgs: { severity, message, buttons, inputs, options } });
        return await handle.result;
    }
    async about() {
        if (this.skipDialogs()) {
            throw new Error('DialogService: refused to show about dialog in tests.');
        }
        const handle = this.model.show({});
        await handle.result;
    }
};
DialogService = ( (__decorate([
    ( (__param(0, IWorkbenchEnvironmentService))),
    ( (__param(1, ILogService)))
], DialogService)));
function initialize(instantiationService) {
    instantiationService.createInstance(DialogHandlerContribution);
}
function getServiceOverride(container) {
    onServicesInitialized(initialize);
    return {
        [( IDialogService.toString())]: new SyncDescriptor(DialogService),
        ...getServiceOverride$1(container)
    };
}
export { getServiceOverride as default };
